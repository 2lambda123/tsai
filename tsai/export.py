# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/007_export.ipynb (unless otherwise specified).

__all__ = ['get_nb_name', 'nb2py']

# Cell
"""
Code copied from the great nbdev library: https://github.com/fastai/nbdev/blob/master/nbdev/export.py
"""

def _mk_flag_re(body, n_params, comment):
    "Compiles a regex for finding nbdev flags"
    import re
    assert body!=True, 'magics no longer supported'
    prefix = r"\s*\#\s*"
    param_group = ""
    if n_params == -1: param_group = r"[ \t]+(.+)"
    if n_params == 1: param_group = r"[ \t]+(\S+)"
    if n_params == (0,1): param_group = r"(?:[ \t]+(\S+))?"
    return re.compile(rf"""
# {comment}:
^            # beginning of line (since re.MULTILINE is passed)
{prefix}
{body}
{param_group}
[ \t]*       # any number of spaces and/or tabs
$            # end of line (since re.MULTILINE is passed)
""", re.MULTILINE | re.VERBOSE)

_re_hide = _mk_flag_re("hide?", 0,
    "Matches any line with #hide without any module name")

# Cell
def _get_unhidden_cells(cells):
    result = []
    for i,cell in enumerate(cells):
        if cell['cell_type'] == 'code':
            if not _re_hide.findall(cell['source'].lower()) and cell['source'] != '': result.append(i)
    return result

def _save_nb(wait=2):
    """
    Save and checkpoints current jupyter notebook.
    """
    from IPython.core.display import Javascript, display
    import time
    display(Javascript('IPython.notebook.save_checkpoint();'))
    time.sleep(wait)

def _read_nb(fname):
    "Read the notebook in `fname`."
    from pathlib import Path
    import nbformat
    with open(Path(fname),'r', encoding='utf8') as f: return nbformat.reads(f.read(), as_version=4)

# Cell
def get_nb_name():
    """
    Return the full path of the jupyter notebook.
    """
    import json
    import os
    import re
    import ipykernel
    import requests
    from urllib.parse import urljoin
    from notebook.notebookapp import list_running_servers
    kernel_id = re.search('kernel-(.*).json', ipykernel.connect.get_connection_file()).group(1)
    servers = list_running_servers()
    for ss in servers:
        response = requests.get(urljoin(ss['url'], 'api/sessions'), params={'token': ss.get('token', '')})
        for nn in json.loads(response.text):
            if nn['kernel']['id'] == kernel_id:
                relative_path = nn['notebook']['path']
                return os.path.join(ss['notebook_dir'], relative_path)

# Cell
def nb2py(target='.', fname=None, verbose=True):
    """Converts the notebook where the function is run to a python script.

    Args:
        target : target directory where the script will be created. Defaults to current directory.
        fname  : name of the script that will be created. Defaults to notebook name.
        verbose: prints out details of the export if True.
    """

    import os
    from pathlib import Path
    try: import nbformat
    except ImportError: raise ImportError('You need to install nbformat to use nb2py!')

    # save nb
    _save_nb()

    # get py full script name
    nb_path = get_nb_name()
    if nb_path is None or not os.path.isfile(nb_path):
        print("nb2py couldn't get the nb name; please pass it as an argument")
        return
    nb_path = Path(nb_path)
    nb_name = nb_path.name
    if fname is None: pyname = Path('.'.join([nb_path.stem, 'py']))
    else:
        if fname.rsplit('.', 1)[1] == 'py': pyname = Path(fname)
        else: py_pynamename = Path('.'.join([fname, 'py']))
    pyname = Path(target)/pyname

    # delete file if exists and create target folder if doesn't exist
    if os.path.exists(pyname): os.remove(pyname)
    pyname.parent.mkdir(parents=True, exist_ok=True)

    # Write script header
    with open(pyname, 'w') as f:
        f.write(f'# -*- coding: utf-8 -*-\n')
        f.write(f'"""{nb_name}\n\n')
        f.write(f'Automatically generated.\n\n')
        if nb_path is not None:
            f.write(f'Original file is located at:\n')
            f.write(f'    {nb_path}\n')
        f.write(f'"""')

    # identify convertible cells (excluding empty and those with hide flags)
    nb = _read_nb(nb_name)
    idxs = _get_unhidden_cells(nb['cells'])
    pnb = nbformat.from_dict(nb)
    pnb['cells'] = [pnb['cells'][i] for i in idxs]

    # clean up cells and write script
    sep = '\n'* 2
    for i,cell in enumerate(pnb['cells']):
        source_str = cell['source'].replace('\r', '')
        code_lines = source_str.split('\n')
        if code_lines == ['']: continue
        while code_lines[0] == '': code_lines = code_lines[1:]
        while code_lines[-1] == '': code_lines = code_lines[:-1]
        cl = []
        for j in range(len(code_lines)):
            if list(set(code_lines[j].split(" "))) == ['']:
                code_lines[j] = ''
            if i == 0 or code_lines[j-1] != '' or code_lines[j] != '':
                cl.append(code_lines[j])
        code_lines = cl
        code = sep + '\n'.join(code_lines)
        with open(pyname, 'a', encoding='utf8') as f: f.write(code)

    # check script exists
    assert os.path.isfile(pyname), f"an error occurred during the export and {pyname} doesn't exist"
    if verbose:
        print(f"{nb_name} converted to {pyname}")
    return str(pyname)